{"version":3,"sources":["index.js"],"names":["color","lineWidth","tryResNetButtonName","tryResNetButtonText","keypointsToDraw","isAndroid","test","navigator","userAgent","isiOS","isMobile","toTuple","y","x","drawPoint","ctx","r","beginPath","arc","Math","PI","fillStyle","fill","drawSegment","ay","ax","by","bx","scale","moveTo","lineTo","strokeStyle","stroke","drawCircle","rad","getWrists","keypoints","minConfidence","wrists","i","length","keypoint","includes","part","score","push","drawSteeringWheel","rightWrist","leftWrist","rx","position","ry","lx","ly","centerY","centerX","distanceX","distanceY","hypot","angleBetween","dy","dx","theta","atan2","renderToCanvas","a","height","width","shape","imageData","ImageData","data","j","k","putImageData","renderImageToCanvas","image","size","canvas","getContext","drawImage"],"mappings":"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","file":"CarDrivingResNet-master.de3729ad.js","sourceRoot":"..","sourcesContent":["const color = 'aqua';\nconst lineWidth = 2;\n\nexport const tryResNetButtonName = 'tryResNetButton';\nexport const tryResNetButtonText = '[New] Try ResNet50';\nconst keypointsToDraw = ['leftWrist', 'rightWrist'];\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nexport function isMobile() {\n  return isAndroid() || isiOS();\n}\n\nfunction toTuple({y, x}) {\n  return [y, x];\n}\n\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n\n/**\n * Draws a line on a canvas, i.e. a joint\n */\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n/**\n * Draws a circle on a canvas\n */\nexport function drawCircle([y, x], rad, color, ctx) {\n  ctx.beginPath();\n  ctx.arc(x, y, rad, 0, 2 * Math.PI);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n\n/**\n * Filers the wrists from all the keypoints detected\n * @param {array} keypoints \n * @param {float} minConfidence \n */\nexport function getWrists(keypoints, minConfidence) {\n  let wrists = [];\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n    if (!keypointsToDraw.includes(keypoint.part) || keypoint.score < minConfidence) {\n      continue;\n    }\n    wrists.push(keypoint);\n  }\n  return wrists;\n}\n\n/**\n * Draws steering wheel into a canvas\n */\nexport function drawSteeringWheel(wrists, ctx, scale = 1) {\n\n  if(wrists.length >= 2) {\n\n    const rightWrist = wrists[0];\n    const leftWrist = wrists[1];\n\n    const rx = rightWrist.position.x;\n    const ry = rightWrist.position.y;\n    const lx = leftWrist.position.x;\n    const ly = leftWrist.position.y;\n    \n    const centerY = (ry + ly) / 2;\n    const centerX = (rx + lx) / 2;\n    \n    drawPoint(ctx, ry * scale, rx * scale, 3, color);\n    drawPoint(ctx, ly * scale, lx * scale, 3, color);\n\n    /// steering wheel\n    // segment between hands\n    drawSegment(\n      toTuple(wrists[0].position), toTuple(wrists[1].position), color,\n      scale, ctx);\n    \n    const distanceX = rx-lx;\n    const distanceY = ry-ly;\n    const len = Math.hypot(distanceX, distanceY)\n    const rad = len / 2;\n    \n    drawCircle([centerY, centerX], rad / 3, color, ctx);\n    drawCircle([centerY, centerX], rad, color, ctx);\n  }\n\n}\n\n/**\n * Computes the angle between the wrists\n * @param {array} wrists\n */\nexport function angleBetween(wrists) {\n\n  if(wrists.length < 2) {\n    return 0.0;\n  }\n\n  const rightWrist = wrists[0];\n  const leftWrist = wrists[1];\n\n  const rx = rightWrist.position.x;\n  const ry = rightWrist.position.y;\n  const lx = leftWrist.position.x;\n  const ly = leftWrist.position.y;\n\n  var dy = ly - ry;\n  var dx = lx - rx;\n\n  var theta = Math.atan2(dy, dx); // range (-PI, PI]\n  theta *= -180 / Math.PI; // rads to degs, range (-180, 180]\n\n  return theta;\n}\n\n/**\n * Converts an arary of pixel data into an ImageData object\n */\nexport async function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n\n  const data = await a.data();\n\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Draw an image on a canvas\n */\nexport function renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext('2d');\n\n  ctx.drawImage(image, 0, 0);\n}\n\n"]}